//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18444
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication1.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://i.bitauto.com/", ConfigurationName="ServiceReference1.SystemMessageWebServiceSoap")]
    public interface SystemMessageWebServiceSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://i.bitauto.com/ModuleSend", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool ModuleSend(int recieverId, int sourceId, string sourceKey, string sourceTitle, string msgData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://i.bitauto.com/ModuleSend", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> ModuleSendAsync(int recieverId, int sourceId, string sourceKey, string sourceTitle, string msgData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://i.bitauto.com/ModuleSendByReciverUserNames", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void ModuleSendByReciverUserNames(string[] recieverUserNameArr, int sourceId, string sourceKey, string sourceTitle, string msgData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://i.bitauto.com/ModuleSendByReciverUserNames", ReplyAction="*")]
        System.Threading.Tasks.Task ModuleSendByReciverUserNamesAsync(string[] recieverUserNameArr, int sourceId, string sourceKey, string sourceTitle, string msgData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://i.bitauto.com/ModuleSendByReciverUserIds", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void ModuleSendByReciverUserIds(int[] recieverUserIdArr, int sourceId, string sourceKey, string sourceTitle, string msgData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://i.bitauto.com/ModuleSendByReciverUserIds", ReplyAction="*")]
        System.Threading.Tasks.Task ModuleSendByReciverUserIdsAsync(int[] recieverUserIdArr, int sourceId, string sourceKey, string sourceTitle, string msgData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://i.bitauto.com/SendMessageByAdmin", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void SendMessageByAdmin(string senderName, string content, int[] reciverIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://i.bitauto.com/SendMessageByAdmin", ReplyAction="*")]
        System.Threading.Tasks.Task SendMessageByAdminAsync(string senderName, string content, int[] reciverIds);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface SystemMessageWebServiceSoapChannel : WebApplication1.ServiceReference1.SystemMessageWebServiceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SystemMessageWebServiceSoapClient : System.ServiceModel.ClientBase<WebApplication1.ServiceReference1.SystemMessageWebServiceSoap>, WebApplication1.ServiceReference1.SystemMessageWebServiceSoap {
        
        public SystemMessageWebServiceSoapClient() {
        }
        
        public SystemMessageWebServiceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SystemMessageWebServiceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SystemMessageWebServiceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SystemMessageWebServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool ModuleSend(int recieverId, int sourceId, string sourceKey, string sourceTitle, string msgData) {
            return base.Channel.ModuleSend(recieverId, sourceId, sourceKey, sourceTitle, msgData);
        }
        
        public System.Threading.Tasks.Task<bool> ModuleSendAsync(int recieverId, int sourceId, string sourceKey, string sourceTitle, string msgData) {
            return base.Channel.ModuleSendAsync(recieverId, sourceId, sourceKey, sourceTitle, msgData);
        }
        
        public void ModuleSendByReciverUserNames(string[] recieverUserNameArr, int sourceId, string sourceKey, string sourceTitle, string msgData) {
            base.Channel.ModuleSendByReciverUserNames(recieverUserNameArr, sourceId, sourceKey, sourceTitle, msgData);
        }
        
        public System.Threading.Tasks.Task ModuleSendByReciverUserNamesAsync(string[] recieverUserNameArr, int sourceId, string sourceKey, string sourceTitle, string msgData) {
            return base.Channel.ModuleSendByReciverUserNamesAsync(recieverUserNameArr, sourceId, sourceKey, sourceTitle, msgData);
        }
        
        public void ModuleSendByReciverUserIds(int[] recieverUserIdArr, int sourceId, string sourceKey, string sourceTitle, string msgData) {
            base.Channel.ModuleSendByReciverUserIds(recieverUserIdArr, sourceId, sourceKey, sourceTitle, msgData);
        }
        
        public System.Threading.Tasks.Task ModuleSendByReciverUserIdsAsync(int[] recieverUserIdArr, int sourceId, string sourceKey, string sourceTitle, string msgData) {
            return base.Channel.ModuleSendByReciverUserIdsAsync(recieverUserIdArr, sourceId, sourceKey, sourceTitle, msgData);
        }
        
        public void SendMessageByAdmin(string senderName, string content, int[] reciverIds) {
            base.Channel.SendMessageByAdmin(senderName, content, reciverIds);
        }
        
        public System.Threading.Tasks.Task SendMessageByAdminAsync(string senderName, string content, int[] reciverIds) {
            return base.Channel.SendMessageByAdminAsync(senderName, content, reciverIds);
        }
    }
}
